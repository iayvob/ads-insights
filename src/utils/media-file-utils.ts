// MediaFile utility functions to handle database operations
import { prisma } from "@/config/database/prisma";
import { ObjectId } from 'mongodb';

/**
 * These types are used to properly type MongoDB raw responses
 * when using $runCommandRaw with Prisma client
 */

// Define types for MongoDB responses to improve type safety
interface MongoDBDocument {
    _id: { $oid: string } | string;
    [key: string]: any;
}

interface MongoDBFindResponse {
    cursor?: {
        firstBatch?: MongoDBDocument[];
        [key: string]: any;
    };
    [key: string]: any;
}

interface MongoDBCountResponse {
    n?: number;
    ok?: number;
    [key: string]: any;
}

/**
 * MediaFile interface represents a media file stored in the database
 * and its associated metadata
 */
export interface MediaFile {
    /** Unique identifier for the media file (MongoDB ObjectId as string) */
    id: string;

    /** User ID who owns this media file */
    userId: string;

    /** Original filename of the uploaded file */
    filename: string;

    /** The Cloudinary public_id where the file is stored */
    fileKey: string;

    /** MIME type of the file (e.g., "image/jpeg", "video/mp4") */
    fileType: string;

    /** Size of the file in bytes */
    fileSize: number;

    /** Cloudinary URL for accessing the file */
    url: string;

    /** Whether the file is a video (true) or image (false) */
    isVideo: boolean;

    /** Width of the image/video in pixels (if available) */
    width?: number;

    /** Height of the image/video in pixels (if available) */
    height?: number;

    /** Duration of the video in seconds (only for videos) */
    duration?: number;

    /** URL to a thumbnail version (generated by Cloudinary) */
    thumbnailUrl?: string;

    /** When the media file record was created */
    createdAt: Date;

    /** When the media file record was last updated */
    updatedAt: Date;

    /** Cloudinary resource type (image, video, raw) */
    resourceType?: string;
}

// Utility functions for MediaFile CRUD operations
export const MediaFileUtils = {
    /**
     * Create a new media file record in the database
     * 
     * This function uses a raw MongoDB command via Prisma's $runCommandRaw
     * because the Prisma schema might not be updated with the MediaFile model yet.
     * 
     * @param data The media file data to create
     * @returns The created MediaFile object with ID and timestamps
     */
    async create(data: {
        userId: string;        // User who owns this file
        filename: string;      // Original filename
        fileKey: string;       // Cloudinary public_id
        fileType: string;      // MIME type (e.g. "image/jpeg")
        fileSize: number;      // Size in bytes
        url: string;           // Cloudinary URL
        isVideo: boolean;      // Whether this is a video
        width?: number;        // Image/video width in pixels
        height?: number;       // Image/video height in pixels
        duration?: number;     // Video duration in seconds
        thumbnailUrl?: string; // URL to thumbnail image
        resourceType?: string; // Cloudinary resource type (image, video, raw)
    }): Promise<MediaFile> {
        const id = new ObjectId().toString();
        const now = new Date();

        // Use raw command to create the document in MongoDB
        await prisma.$runCommandRaw({
            insert: "MediaFile",
            documents: [{
                _id: { $oid: id },
                userId: data.userId,
                filename: data.filename,
                fileKey: data.fileKey,
                fileType: data.fileType,
                fileSize: data.fileSize,
                url: data.url,
                isVideo: data.isVideo,
                width: data.width,
                height: data.height,
                duration: data.duration,
                thumbnailUrl: data.thumbnailUrl,
                resourceType: data.resourceType || (data.isVideo ? 'video' : 'image'),
                createdAt: now,
                updatedAt: now
            }]
        });

        // Return the created file with its new ID and timestamps
        return {
            id,
            ...data,
            createdAt: now,
            updatedAt: now
        };
    },

    /**
     * Find a media file by its ID
     * 
     * Uses a raw MongoDB command to find a file by its ObjectId
     * and converts the result to a MediaFile object
     * 
     * @param id The MediaFile ID (MongoDB ObjectId as string)
     * @returns The MediaFile object if found, or null if not found
     */
    async findById(id: string): Promise<MediaFile | null> {
        try {
            // Query the database using raw MongoDB command
            const result = await prisma.$runCommandRaw({
                find: "MediaFile",
                filter: { _id: { $oid: id } }, // Use MongoDB ObjectId format for querying
                limit: 1
            }) as MongoDBFindResponse;

            // Extract results from MongoDB response format
            const files = result?.cursor?.firstBatch || [];
            if (files.length === 0) return null;

            // Convert MongoDB document to MediaFile object
            const file = files[0] as MongoDBDocument;
            return {
                // Handle ObjectId that could be in different formats
                id: typeof file._id === 'string' ? file._id : file._id.$oid,
                userId: file.userId,
                filename: file.filename,
                fileKey: file.fileKey,
                fileType: file.fileType,
                fileSize: file.fileSize,
                url: file.url,
                isVideo: file.isVideo,
                width: file.width,
                height: file.height,
                duration: file.duration,
                thumbnailUrl: file.thumbnailUrl,
                resourceType: file.resourceType || (file.isVideo ? 'video' : 'image'),
                createdAt: new Date(file.createdAt),
                updatedAt: new Date(file.updatedAt)
            };
        } catch (error) {
            console.error('Error finding media file by ID:', error);
            return null;
        }
    },

    /**
     * Find all media files belonging to a user with pagination
     * 
     * Uses raw MongoDB commands to query files by user ID
     * and get total count for pagination
     * 
     * @param userId The ID of the user
     * @param options Optional pagination parameters (limit and skip)
     * @returns Object containing an array of MediaFile objects and total count
     */
    async findByUserId(userId: string, options: { limit?: number; skip?: number } = {}): Promise<{
        files: MediaFile[];
        total: number;
    }> {
        try {
            // Set default pagination options
            const { limit = 20, skip = 0 } = options;

            // Query files with pagination and sorting
            const result = await prisma.$runCommandRaw({
                find: "MediaFile",
                filter: { userId },
                sort: { createdAt: -1 },  // Most recent first
                limit,
                skip
            }) as MongoDBFindResponse;

            // Get total count for pagination
            const countResult = await prisma.$runCommandRaw({
                count: "MediaFile",
                query: { userId }
            }) as MongoDBCountResponse;

            // Convert MongoDB documents to MediaFile objects
            const documents = result?.cursor?.firstBatch || [];
            const files = documents.map((file: MongoDBDocument) => ({
                id: typeof file._id === 'string' ? file._id : file._id.$oid,
                userId: file.userId,
                filename: file.filename,
                fileKey: file.fileKey,
                fileType: file.fileType,
                fileSize: file.fileSize,
                url: file.url,
                isVideo: file.isVideo,
                width: file.width,
                height: file.height,
                duration: file.duration,
                thumbnailUrl: file.thumbnailUrl,
                resourceType: file.resourceType || (file.isVideo ? 'video' : 'image'),
                createdAt: new Date(file.createdAt),
                updatedAt: new Date(file.updatedAt)
            }));

            return {
                files,
                total: countResult?.n || 0  // n contains the count in MongoDB response
            };
        } catch (error) {
            console.error('Error finding media files by user ID:', error);
            return { files: [], total: 0 };
        }
    },

    /**
     * Delete a media file from the database by ID
     * 
     * Note: This only deletes the database record, not the actual file in Cloudinary.
     * The API route should handle deleting the file from Cloudinary before calling this.
     * 
     * @param id The ID of the media file to delete
     * @returns true if file was deleted, false if not found or error occurred
     */
    async deleteById(id: string): Promise<boolean> {
        try {
            // Execute raw MongoDB delete command
            const result = await prisma.$runCommandRaw({
                delete: "MediaFile",
                deletes: [
                    {
                        q: { _id: { $oid: id } },  // Query by ObjectId
                        limit: 1  // Only delete one document
                    }
                ]
            }) as MongoDBCountResponse;

            // Check if any documents were deleted
            const deleteCount = typeof result?.n === 'number' ? result.n : 0;
            return deleteCount > 0;  // Return true if at least one document was deleted
        } catch (error) {
            console.error('Error deleting media file:', error);
            return false;
        }
    }

    /**
     * You can add additional methods here as needed:
     * - findByPost(postId): Find media files associated with a post
     * - updateUrl(id, newUrl): Update the URL of a media file (e.g. after regenerating a signed URL)
     * - bulkDelete(ids): Delete multiple media files at once
     */
};
